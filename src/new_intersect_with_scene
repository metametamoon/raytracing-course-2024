fn intersect_ray_with_scene(ray: Ray, scene: &Scene) -> Option<(Primitive, Intersection)> {
    let mut min_dist = f64::INFINITY;
    let mut result = None;
    for primitive in &scene.primitives {
        let transposed_ray = Ray {
            origin: ray.origin - primitive.position,
            direction: ray.direction,
        };
        let rotated_ray = Ray {
            origin: primitive
                .rotation
                .conjugate()
                .transform_vector(&transposed_ray.origin),
            direction: primitive
                .rotation
                .conjugate()
                .transform_vector(&transposed_ray.direction),
        };
        if let Some(intersection) = intersect(rotated_ray, &primitive.shape, min_dist) {
            min_dist = intersection.offset;
            result = Some((primitive.clone(), intersection))
        }
    }
    result
}